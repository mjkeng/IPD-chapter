model{

lim = 1


# Arm 0
for(id in 1:n0){
	Outcomes0[id,1] ~ dnorm(mu_0[1],tau0[1])
	for(col in 2:7){
		Outcomes0[id,col] ~ dnorm(mu_0cond[id,col],tau0cond[col])
	}


	for(int in 2:7){
		Upper_0[id,int-1] ~ dinterval(Outcomes0[id,int],lim) # captures whether qol_0 is at the upper bound of 1
	}
}

# conditional means and variances
for(id in 1:n0){
		mu_0cond[id,1] <- mu_0[1]
		mu_0cond[id,2] <- mu_0[2] + (Outcomes0[id,1] - mu_0[1])*Sigma_0[2,1]/Sigma_0[1,1]
	for(col in 3:7){
		mu_0cond[id,col] <- mu_0[col] + Sigma_0[col,1:(col-1)]%*%inverse(Sigma_0[1:(col-1),1:(col-1)])%*%(Outcomes0[id,1:(col-1)] - mu_0[1:(col-1)])

	}
}
		tau0cond[1] <- tau0[1]
		tau0cond[2] <- 1/(Sigma_0[2,2] - Sigma_0[2,1]*Sigma_0[1,2]/Sigma_0[1,1])
	for(col in 3:7){
		tau0cond[col] <- 1/(Sigma_0[col,col] - Sigma_0[col,1:(col-1)]%*%inverse(Sigma_0[1:(col-1),1:(col-1)])%*%Sigma_0[1:(col-1),col])
	}




# Compute mean QoL
for(int in 1:6){
	qol_0_mean[int] = 1 - (1-mu_0[int+1])*pnorm(1,mu_0[int+1],tau0[int+1]) -  sigma0[int+1]*dnorm(1,mu_0[int+1],tau0[int+1])
}

# Compute total mean QoL
qaly_0 <- 
0.5*(qol_0_mean[1] + qol_0_mean[2])*3/12 + 
0.5*(qol_0_mean[2] + qol_0_mean[3])*3/12 + 
0.5*(qol_0_mean[3] + qol_0_mean[4])*6/12 + 
0.5*(qol_0_mean[4] + qol_0_mean[5])*(6/12)+ 
0.5*(qol_0_mean[5] + qol_0_mean[6])*(6/12)

# Compute mean total cost
 cost_0 <- exp(mu_0[1] + 0.5*Sigma_0[1,1])


# Priors
for(i in 2:7){ mu_0[i] ~ dnorm(0.5,16)}

mu_0[1] ~ dnorm(10,0.01)

for(i in 1:7){ 
	D_0[i,i] ~ dgamma(1,1)
	sqrt.D0[i,i] <- sqrt(D_0[i,i])
}
for(i in 1:6){ 
	for(j in (i+1):7){
		D_0[i,j] <- 0
		L_0[i,j] <- 0
		sqrt.D0[i,j] <- 0
	}
}

L_0[1,1] <- 1
L_0[2,1] <- cos(phi0[1,2])
 L_0[2,2] <- sin(phi0[1,2])
 D_0[2,1] <- 0
 sqrt.D0[2,1] <- 0
#L_0[2,1] <- 1
for(i in 3:7){
  L_0[i,1] <- cos(phi0[i-1,2])
 D_0[i,1] <- 0
  sqrt.D0[i,1] <- 0
	for(j in 2:(i-1)){
		D_0[i,j] <- 0
		L_0[i,j] <- prod(sin(phi0[i-1,2:j]))*cos(phi0[i-1,j+1])
#		L_0[i,j] <- 0
		sqrt.D0[i,j] <- 0
	}
	L_0[i,i] <- prod(sin(phi0[i-1,2:i]))
# L_0[i,i] <- 1
}	

for(i in 1:6){
  for(j in 1:7){
    phi0[i,j] ~ dunif(0,3.1415)
  }
}
 Sigma_0 <- sqrt.D0%*%L_0%*%t(L_0)%*%sqrt.D0
# Sigma_0 <- sqrt.D0%*%sqrt.D0


# Compute variance matrix
for(i in 1:7){
	sigma0[i] <- sqrt(Sigma_0[i,i])
	tau0[i] <- 1/Sigma_0[i,i]
	
}

R_0 <- L_0%*%t(L_0)


# Arm 1
for(id in 1:n1){
	Outcomes1[id,1] ~ dnorm(mu_1[1],tau1[1])
	for(col in 2:7){
		Outcomes1[id,col] ~ dnorm(mu_1cond[id,col],tau1cond[col])
	}

	for(int in 2:7){
		Upper_1[id,int-1] ~ dinterval(Outcomes1[id,int],lim) # captures whether qol_0 is at the upper bound of 1
	}
}

# conditional means and variances
for(id in 1:n1){
	mu_1cond[id,1] <- mu_1[1]
	mu_1cond[id,2] <- mu_1[2] + (Outcomes1[id,1] - mu_1[1])*Sigma_1[2,1]/Sigma_1[1,1]


	for(col in 3:7){
		mu_1cond[id,col] <- mu_1[col] + Sigma_1[col,1:(col-1)]%*%inverse(Sigma_1[1:(col-1),1:(col-1)])%*%(Outcomes1[id,1:(col-1)] - mu_1[1:(col-1)])

	}

}
		tau1cond[1] <- tau1[1]
		tau1cond[2] <- 1/(Sigma_1[2,2] - Sigma_1[2,1]*Sigma_1[1,2]/Sigma_1[1,1])

		for(col in 3:7){
			tau1cond[col] <- 1/(Sigma_1[col,col] - Sigma_1[col,1:(col-1)]%*%inverse(Sigma_1[1:(col-1),1:(col-1)])%*%Sigma_1[1:(col-1),col])

		}




# Compute mean QoL
for(int in 1:6){
	qol_1_mean[int] = 1 - (1-mu_1[int+1])*pnorm(1,mu_1[int+1],tau1[int+1]) -  sigma1[int+1]*dnorm(1,mu_1[int+1],tau1[int+1])
}

# Compute total mean QoL
qaly_1 <- 
0.5*(qol_1_mean[1] + qol_1_mean[2])*3/12 + 
0.5*(qol_1_mean[2] + qol_1_mean[3])*3/12 + 
0.5*(qol_1_mean[3] + qol_1_mean[4])*6/12 + 
0.5*(qol_1_mean[4] + qol_1_mean[5])*(6/12) + 
0.5*(qol_1_mean[5] + qol_1_mean[6])*(6/12)

# Compute mean total cost
 cost_1 <- exp(mu_1[1] + 0.5*Sigma_1[1,1])


# Priors
for(i in 2:7){ mu_1[i] ~ dnorm(0.5,16)}

mu_1[1] ~ dnorm(10,0.01)

for(i in 1:7){ 
	D_1[i,i] ~ dgamma(1,1)
	sqrt.D1[i,i] <- sqrt(D_1[i,i])
}
for(i in 1:6){ 
	for(j in (i+1):7){
		D_1[i,j] <- 0
		L_1[i,j] <- 0
		sqrt.D1[i,j] <- 0
	}
}

 L_1[1,1] <- 1
 L_1[2,1] <- cos(phi1[1,2])
 L_1[2,2] <- sin(phi1[1,2])
 D_1[2,1] <- 0
 sqrt.D1[2,1] <- 0

for(i in 3:7){
  L_1[i,1] <- cos(phi1[i-1,2])
 D_1[i,1] <- 0
  sqrt.D1[i,1] <- 0
	for(j in 2:(i-1)){
		D_1[i,j] <- 0
		L_1[i,j] <- prod(sin(phi1[i-1,2:j]))*cos(phi1[i-1,j+1])

		sqrt.D1[i,j] <- 0
	}
	L_1[i,i] <- prod(sin(phi1[i-1,2:i]))

}

for(i in 1:6){
  for(j in 1:7){
    phi1[i,j] ~ dunif(0,3.1415)
  }
}
 Sigma_1[1:7,1:7] <- sqrt.D1%*%L_1%*%t(L_1)%*%sqrt.D1
R_1 <- L_1%*%t(L_1)



# Compute variance matrix
for(i in 1:7){
	sigma1[i] <- sqrt(Sigma_1[i,i])
	tau1[i] <- 1/Sigma_1[i,i]
	
}

### Incremental costs and effects
 qaly_inc <- qaly_1 - qaly_0
 cost_inc <- cost_1 - cost_0

}


